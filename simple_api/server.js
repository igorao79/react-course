const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const { restaurants, products, reviews, users } = require('./data');

const app = express();
const PORT = process.env.PORT || 3002;

// Middleware
app.use(express.json());
app.use(cors());

// Helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const getRestaurantDishes = (restaurantId) => {
  const restaurant = restaurants.find(r => r.id === restaurantId);
  if (!restaurant) return [];
  
  return restaurant.menu.map(dishId => 
    products.find(product => product.id === dishId)
  ).filter(Boolean);
};

const getRestaurantReviews = (restaurantId) => {
  const restaurant = restaurants.find(r => r.id === restaurantId);
  if (!restaurant) return [];
  
  return restaurant.reviews.map(reviewId => {
    const review = reviews.find(r => r.id === reviewId);
    if (!review) return null;
    
    const user = users.find(u => u.id === review.userId);
    return {
      ...review,
      userName: user ? user.name : 'Unknown'
    };
  }).filter(Boolean);
};

// API Routes

// –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
app.get('/api/restaurants', (req, res) => {
  try {
    res.json(restaurants);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤' });
  }
});

app.get('/api/restaurant/:restaurantId', (req, res) => {
  try {
    const { restaurantId } = req.params;
    const restaurant = restaurants.find(r => r.id === restaurantId);
    
    if (!restaurant) {
      return res.status(404).json({ error: '–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(restaurant);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞' });
  }
});

// –ë–ª—é–¥–∞
app.get('/api/dishes', (req, res) => {
  try {
    const { restaurantId } = req.query;
    
    if (!restaurantId) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å restaurantId' });
    }
    
    const dishes = getRestaurantDishes(restaurantId);
    res.json(dishes);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª—é–¥' });
  }
});

app.get('/api/dish/:dishId', (req, res) => {
  try {
    const { dishId } = req.params;
    const dish = products.find(p => p.id === dishId);
    
    if (!dish) {
      return res.status(404).json({ error: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    res.json(dish);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª—é–¥–∞' });
  }
});

// –û—Ç–∑—ã–≤—ã
app.get('/api/reviews', (req, res) => {
  try {
    const { restaurantId } = req.query;
    
    if (!restaurantId) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å restaurantId' });
    }
    
    const restaurantReviews = getRestaurantReviews(restaurantId);
    res.json(restaurantReviews);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤' });
  }
});

app.post('/api/review/:restaurantId', (req, res) => {
  try {
    const { restaurantId } = req.params;
    const { userId, userName, text, rating } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    const restaurant = restaurants.find(r => r.id === restaurantId);
    if (!restaurant) {
      return res.status(404).json({ error: '–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!userId || !userName || !text || !rating) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: userId, userName, text, rating' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = users.find(u => u.id === userId);
    if (!user) {
      user = { id: userId, name: userName };
      users.push(user);
      console.log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (${userId})`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
    const newReview = {
      id: uuidv4(),
      userId,
      text,
      rating: Number(rating),
      userName: user.name
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –º–∞—Å—Å–∏–≤
    reviews.push(newReview);
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID –æ—Ç–∑—ã–≤–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    restaurant.reviews.push(newReview.id);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤ –æ—Ç ${userName} –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ${restaurant.name}`);
    res.status(201).json(newReview);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞' });
  }
});

app.patch('/api/review/:reviewId', (req, res) => {
  try {
    const { reviewId } = req.params;
    const { text, rating } = req.body;
    
    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∑—ã–≤
    const reviewIndex = reviews.findIndex(r => r.id === reviewId);
    if (reviewIndex === -1) {
      return res.status(404).json({ error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
    if (text !== undefined) {
      reviews[reviewIndex].text = text;
    }
    if (rating !== undefined) {
      reviews[reviewIndex].rating = Number(rating);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const user = users.find(u => u.id === reviews[reviewIndex].userId);
    const updatedReview = {
      ...reviews[reviewIndex],
      userName: user ? user.name : 'Unknown'
    };
    
    res.json(updatedReview);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞' });
  }
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
app.get('/api/users', (req, res) => {
  try {
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('Server Error:', error);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
  console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint\'—ã:');
  console.log('GET /api/restaurants - –≤—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã');
  console.log('GET /api/restaurant/:restaurantId - —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ ID');
  console.log('GET /api/dishes?restaurantId=:restaurantId - –±–ª—é–¥–∞ –ø–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞');
  console.log('GET /api/dish/:dishId - –±–ª—é–¥–æ –ø–æ ID');
  console.log('GET /api/reviews?restaurantId=:restaurantId - –æ—Ç–∑—ã–≤—ã –ø–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞');
  console.log('POST /api/review/:restaurantId - —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤');
  console.log('PATCH /api/review/:reviewId - –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤');
  console.log('GET /api/users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
});

module.exports = app; 